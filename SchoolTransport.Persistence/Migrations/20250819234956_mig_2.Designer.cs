// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolTransport.Persistence.Context;

#nullable disable

namespace SchoolTransport.Persistence.Migrations
{
    [DbContext(typeof(SchoolTransportDbContext))]
    [Migration("20250819234956_mig_2")]
    partial class mig_2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolTransport.Domain.Entities.Driver.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ahmet Yılmaz",
                            TenantId = "1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mehmet Kaya",
                            TenantId = "1"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ali Demir",
                            TenantId = "1"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hasan Çelik",
                            TenantId = "2"
                        },
                        new
                        {
                            Id = 5,
                            Name = "İbrahim Acar",
                            TenantId = "2"
                        });
                });

            modelBuilder.Entity("SchoolTransport.Domain.Entities.Expenses.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Fuel")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Industry")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Insurance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Penalty")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("SchoolTransport.Domain.Entities.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "897b906c-927d-4085-891f-3a89ad49b157",
                            CreatedAt = new DateTime(2025, 8, 19, 23, 49, 55, 198, DateTimeKind.Utc).AddTicks(8796),
                            Email = "admin@schooltransport.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            IsActive = true,
                            LastName = "Administrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SCHOOLTRANSPORT.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDLjoUsA2mcejH69ehLwiUiWkv3ViIFzS68mf2jRejXwRnJKJUInVY+EPK/N3bJc3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "abe9e4ab-cabd-48a2-814e-f1b9dfeebe75",
                            TenantId = "1",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e12afded-7b79-4f5a-922e-d920dd21435e",
                            CreatedAt = new DateTime(2025, 8, 19, 23, 49, 55, 328, DateTimeKind.Utc).AddTicks(3240),
                            Email = "test@schooltransport.com",
                            EmailConfirmed = true,
                            FirstName = "Test",
                            IsActive = true,
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@SCHOOLTRANSPORT.COM",
                            NormalizedUserName = "TESTUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEH/douKSG+GcoAnl2Q4izuQn2U1TnPc1POJ+tGhzaFABIq6ULUYxwg4mEKwoxVyAnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b471881-a6a9-4737-9e27-a26f462af850",
                            TenantId = "2",
                            TwoFactorEnabled = false,
                            UserName = "testuser"
                        });
                });

            modelBuilder.Entity("SchoolTransport.Domain.Entities.Payment.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("DebtAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastPaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MonthlyFee")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PaidAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("RemainingAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TotalFee")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("SchoolTransport.Domain.Entities.Payment.PaymentTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TenantId");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("SchoolTransport.Domain.Entities.School.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<DateTime>("AcademicYearEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AcademicYearStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstallmentCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(9);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcademicYear = 0,
                            AcademicYearEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AcademicYearStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstallmentCount = 9,
                            Name = "Atatürk İlkokulu",
                            TenantId = "1"
                        },
                        new
                        {
                            Id = 2,
                            AcademicYear = 0,
                            AcademicYearEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AcademicYearStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstallmentCount = 9,
                            Name = "Mehmet Akif Ersoy Ortaokulu",
                            TenantId = "1"
                        },
                        new
                        {
                            Id = 3,
                            AcademicYear = 0,
                            AcademicYearEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AcademicYearStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstallmentCount = 9,
                            Name = "Konya Fen Lisesi",
                            TenantId = "2"
                        },
                        new
                        {
                            Id = 4,
                            AcademicYear = 0,
                            AcademicYearEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AcademicYearStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstallmentCount = 9,
                            Name = "Meram Anadolu Lisesi",
                            TenantId = "2"
                        });
                });

            modelBuilder.Entity("SchoolTransport.Domain.Entities.School.SchoolFeeStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("MaxDistance")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("MinDistance")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("MonthlyFee")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TenantId");

                    b.ToTable("SchoolFeeStructures");
                });

            modelBuilder.Entity("SchoolTransport.Domain.Entities.Student.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MonthlyFee")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TenantId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Aydın Mahallesi, İzmir",
                            Distance = 5,
                            FullName = "Ayşe Yılmaz",
                            PhoneNumber = "0532-123-4567",
                            SchoolId = 1,
                            TenantId = "1"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Balçova Caddesi, İzmir",
                            Distance = 3,
                            FullName = "Fatma Kaya",
                            PhoneNumber = "0533-234-5678",
                            SchoolId = 1,
                            TenantId = "1"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Konak Sokak, Ankara",
                            Distance = 8,
                            FullName = "Zeynep Demir",
                            PhoneNumber = "0534-345-6789",
                            SchoolId = 2,
                            TenantId = "1"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Çankaya Caddesi, Ankara",
                            Distance = 1,
                            FullName = "Elif Çelik",
                            PhoneNumber = "0535-456-7890",
                            SchoolId = 2,
                            TenantId = "1"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Bostancı Mahallesi, İstanbul",
                            Distance = 12,
                            FullName = "Büşra Acar",
                            PhoneNumber = "0536-567-8901",
                            SchoolId = 3,
                            TenantId = "2"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Kadıköy Sokak, İstanbul",
                            Distance = 7,
                            FullName = "Merve Öztürk",
                            PhoneNumber = "0537-678-9012",
                            SchoolId = 3,
                            TenantId = "2"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Şirinyer Caddesi, İzmir",
                            Distance = 4,
                            FullName = "Seda Arslan",
                            PhoneNumber = "0538-789-0123",
                            SchoolId = 4,
                            TenantId = "2"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Bornova Sokak, İzmir",
                            Distance = 6,
                            FullName = "Gamze Polat",
                            PhoneNumber = "0539-890-1234",
                            SchoolId = 4,
                            TenantId = "2"
                        });
                });

            modelBuilder.Entity("SchoolTransport.Domain.Entities.Vehicle.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DriverId")
                        .IsUnique()
                        .HasFilter("[DriverId] IS NOT NULL");

                    b.HasIndex("TenantId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DriverId = 1,
                            PlateNumber = "42 ABC 123",
                            TenantId = "1"
                        },
                        new
                        {
                            Id = 2,
                            DriverId = 2,
                            PlateNumber = "42 DEF 456",
                            TenantId = "1"
                        },
                        new
                        {
                            Id = 3,
                            DriverId = 3,
                            PlateNumber = "42 GHI 789",
                            TenantId = "1"
                        },
                        new
                        {
                            Id = 4,
                            PlateNumber = "42 JKL 012",
                            TenantId = "2"
                        },
                        new
                        {
                            Id = 5,
                            DriverId = 4,
                            PlateNumber = "42 MNO 345",
                            TenantId = "2"
                        });
                });

            modelBuilder.Entity("SchoolVehicle", b =>
                {
                    b.Property<int>("SchoolsId")
                        .HasColumnType("int");

                    b.Property<int>("VehiclesId")
                        .HasColumnType("int");

                    b.HasKey("SchoolsId", "VehiclesId");

                    b.HasIndex("VehiclesId");

                    b.ToTable("SchoolVehicle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SchoolTransport.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SchoolTransport.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolTransport.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SchoolTransport.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolTransport.Domain.Entities.Expenses.Expense", b =>
                {
                    b.HasOne("SchoolTransport.Domain.Entities.Vehicle.Vehicle", "Vehicle")
                        .WithMany("Expenses")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SchoolTransport.Domain.Entities.Payment.Payment", b =>
                {
                    b.HasOne("SchoolTransport.Domain.Entities.Student.Student", "Student")
                        .WithOne("Payment")
                        .HasForeignKey("SchoolTransport.Domain.Entities.Payment.Payment", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolTransport.Domain.Entities.Payment.PaymentTransaction", b =>
                {
                    b.HasOne("SchoolTransport.Domain.Entities.Payment.Payment", "Payment")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolTransport.Domain.Entities.Student.Student", "Student")
                        .WithMany("PaymentTransaction")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Payment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolTransport.Domain.Entities.School.SchoolFeeStructure", b =>
                {
                    b.HasOne("SchoolTransport.Domain.Entities.School.School", "School")
                        .WithMany("FeeStructures")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolTransport.Domain.Entities.Student.Student", b =>
                {
                    b.HasOne("SchoolTransport.Domain.Entities.School.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolTransport.Domain.Entities.Vehicle.Vehicle", "Vehicle")
                        .WithMany("Students")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("School");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SchoolTransport.Domain.Entities.Vehicle.Vehicle", b =>
                {
                    b.HasOne("SchoolTransport.Domain.Entities.Driver.Driver", "Driver")
                        .WithOne("Vehicle")
                        .HasForeignKey("SchoolTransport.Domain.Entities.Vehicle.Vehicle", "DriverId");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("SchoolVehicle", b =>
                {
                    b.HasOne("SchoolTransport.Domain.Entities.School.School", null)
                        .WithMany()
                        .HasForeignKey("SchoolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolTransport.Domain.Entities.Vehicle.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehiclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolTransport.Domain.Entities.Driver.Driver", b =>
                {
                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SchoolTransport.Domain.Entities.Payment.Payment", b =>
                {
                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("SchoolTransport.Domain.Entities.School.School", b =>
                {
                    b.Navigation("FeeStructures");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolTransport.Domain.Entities.Student.Student", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("PaymentTransaction");
                });

            modelBuilder.Entity("SchoolTransport.Domain.Entities.Vehicle.Vehicle", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
